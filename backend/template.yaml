AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: kitchen-tracker serverless backend

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Deployment environment

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.13
    Environment:
      Variables:
        ITEMS_TABLE: !Ref ItemsTable
        HOUSEHOLD_ID: !Sub "${AWS::StackName}-household"
        ENVIRONMENT: !Ref Environment
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/kitchen_tracker/
      Handler: app.lambda_handler
      Runtime: python3.13
      Events:
        # Root endpoint
        RootApi:
          Type: Api
          Properties:
            Path: /
            Method: GET
        
        # Health endpoints
        HealthItems:
          Type: Api
          Properties:
            Path: /health/items
            Method: ANY
        HealthComplete:
          Type: Api
          Properties:
            Path: /health/complete
            Method: POST
        HealthToday:
          Type: Api
          Properties:
            Path: /health/today
            Method: GET
        
        # Person endpoints
        PeopleList:
          Type: Api
          Properties:
            Path: /people
            Method: GET
        PeopleCreate:
          Type: Api
          Properties:
            Path: /people
            Method: POST
        PersonHealth:
          Type: Api
          Properties:
            Path: /people/{person_id}/health
            Method: ANY
        
        # Pet endpoints
        PetList:
          Type: Api
          Properties:
            Path: /pets
            Method: GET
        PetSetup:
          Type: Api
          Properties:
            Path: /pets/setup
            Method: POST
        PetComplete:
          Type: Api
          Properties:
            Path: /pets/complete
            Method: POST
        PetToday:
          Type: Api
          Properties:
            Path: /pets/today
            Method: GET
        
        # Meal endpoints  
        MealList:
          Type: Api
          Properties:
            Path: /meals
            Method: GET
        MealSetup:
          Type: Api
          Properties:
            Path: /meals/setup
            Method: POST
        MealCook:
          Type: Api
          Properties:
            Path: /meals/cook
            Method: POST
        MealRecords:
          Type: Api
          Properties:
            Path: /meals/records
            Method: GET
        MealById:
          Type: Api
          Properties:
            Path: /meals/{meal_id}
            Method: GET
        MealStatusUpdate:
          Type: Api
          Properties:
            Path: /meals/{meal_id}/status
            Method: PUT
        
        # Task endpoints
        TaskList:
          Type: Api
          Properties:
            Path: /tasks
            Method: GET
        TaskSetup:
          Type: Api
          Properties:
            Path: /tasks/setup
            Method: POST
        TaskComplete:
          Type: Api
          Properties:
            Path: /tasks/complete
            Method: POST
        TaskToday:
          Type: Api
          Properties:
            Path: /tasks/today
            Method: GET
        TaskOverdue:
          Type: Api
          Properties:
            Path: /tasks/overdue
            Method: GET
        TaskCompleted:
          Type: Api
          Properties:
            Path: /tasks/completed
            Method: GET
        TaskById:
          Type: Api
          Properties:
            Path: /tasks/{task_id}
            Method: GET
        TaskStatusUpdate:
          Type: Api
          Properties:
            Path: /tasks/{task_id}/status
            Method: PUT
        
        # Dashboard endpoints
        DashboardToday:
          Type: Api
          Properties:
            Path: /dashboard/today
            Method: GET
        DashboardOverdue:
          Type: Api
          Properties:
            Path: /dashboard/overdue
            Method: GET
        DashboardTrends:
          Type: Api
          Properties:
            Path: /dashboard/trends
            Method: GET
        
        # Quick Complete endpoints
        UniversalComplete:
          Type: Api
          Properties:
            Path: /complete
            Method: POST
        CompletionHistory:
          Type: Api
          Properties:
            Path: /complete/history
            Method: GET
      
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable

  # DynamoDB table with environment-specific naming
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-Items"
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: item_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: item_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: kitchen-tracker
  
  # Email processing (only for prod)
  EmailProcessorFunction:
    Type: AWS::Serverless::Function
    Condition: IsProd
    Properties:
      CodeUri: src/kitchen_tracker/
      Handler: app.email_lambda_handler
      Runtime: python3.13
      Environment:
        Variables:
          EMAIL_BUCKET: !Ref EmailStorageBucket
          API_URL: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
          HOUSEHOLD_ID: !Sub "${AWS::StackName}-household"
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref EmailStorageBucket
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"

  EmailStorageBucket:
    Type: AWS::S3::Bucket
    Condition: IsProd
    Properties:
      BucketName: !Sub "${AWS::StackName}-emails"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  EmailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsProd
    Properties:
      Bucket: !Ref EmailStorageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowSESPuts"
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "arn:aws:s3:::${EmailStorageBucket}/*"
            Condition:
              StringEquals:
                aws:Referer: !Ref "AWS::AccountId"

Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  
  HouseholdId:
    Description: "Household ID for this deployment"
    Value: !Sub "${AWS::StackName}-household"
  
  Environment:
    Description: "Deployment environment"
    Value: !Ref Environment
  
  TableName:
    Description: "DynamoDB table name"
    Value: !Ref ItemsTable