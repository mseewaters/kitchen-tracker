AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: kitchen-tracker serverless backend (basic version)

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.13
    Environment:
      Variables:
        ITEMS_TABLE: !Ref ItemsTable
        HOUSEHOLD_ID: !Sub "${AWS::StackName}-household"
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/kitchen_tracker/
      Handler: app.lambda_handler
      Runtime: python3.13
      Events:
        # Root endpoint
        RootApi:
          Type: Api
          Properties:
            Path: /
            Method: GET
        # Health endpoints
        HealthItems:
          Type: Api
          Properties:
            Path: /health/items
            Method: ANY
        HealthComplete:
          Type: Api
          Properties:
            Path: /health/complete
            Method: POST
        HealthToday:
          Type: Api
          Properties:
            Path: /health/today
            Method: GET
        # Person endpoints
        PeopleList:
          Type: Api
          Properties:
            Path: /people
            Method: GET
        PeopleCreate:
          Type: Api
          Properties:
            Path: /people
            Method: POST
        PersonHealth:
          Type: Api
          Properties:
            Path: /people/{person_id}/health
            Method: ANY
        # Pet endpoints
        PetList:
          Type: Api
          Properties:
            Path: /pets
            Method: GET
        PetSetup:
          Type: Api
          Properties:
            Path: /pets/setup
            Method: POST
        PetComplete:
          Type: Api
          Properties:
            Path: /pets/complete
            Method: POST
        PetToday:
          Type: Api
          Properties:
            Path: /pets/today
            Method: GET
        # Meal endpoints  
        MealList:
          Type: Api
          Properties:
            Path: /meals
            Method: GET
        MealSetup:
          Type: Api
          Properties:
            Path: /meals/setup
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable

  # Simple DynamoDB table
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-Items"
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: item_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: item_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  
  EmailProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/kitchen_tracker/
      Handler: app.email_lambda_handler
      Runtime: python3.13
      Environment:
        Variables:
          EMAIL_BUCKET: !Ref EmailStorageBucket
          API_URL: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
          HOUSEHOLD_ID: !Sub "${AWS::StackName}-household"
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref EmailStorageBucket
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"

  EmailStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-emails"

  EmailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EmailStorageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowSESPuts"
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "arn:aws:s3:::${EmailStorageBucket}/*"
            Condition:
              StringEquals:
                aws:Referer: !Ref "AWS::AccountId"


Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  
  HouseholdId:
    Description: "Household ID for this deployment"
    Value: !Sub "${AWS::StackName}-household"